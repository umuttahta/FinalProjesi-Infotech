// <auto-generated />
using System;
using ChocolateApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ChocolateApp.Data.Migrations
{
    [DbContext(typeof(ChocolateAppDbContext))]
    [Migration("20240907225929_ChocolateUpdated")]
    partial class ChocolateUpdated
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.8");

            modelBuilder.Entity("ChocolateApp.Entity.Concrete.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("ChocolateApp.Entity.Concrete.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CartId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ChocolateId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ChocolateId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("ChocolateApp.Entity.Concrete.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Sütlü çikolata kategorisi",
                            IsActive = false,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Sütlü Çikolata"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Bitter çikolata kategorisi",
                            IsActive = false,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Bitter Çikolata"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Beyaz çikolata kategorisi",
                            IsActive = false,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Beyaz Çikolata"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Organik çikolata kategorisi",
                            IsActive = false,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Vegan Çikolata"
                        });
                });

            modelBuilder.Entity("ChocolateApp.Entity.Concrete.Chocolate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Brand")
                        .HasColumnType("TEXT");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("CocoaPercentage")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Ingredients")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("NutritionalInformation")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(16,2)");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Weight")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("Chocolates", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Brand = "ChocoDelight",
                            Category = "Sütlü Çikolata",
                            CocoaPercentage = 30.0,
                            CreatedDate = new DateTime(2024, 9, 8, 1, 59, 29, 98, DateTimeKind.Local).AddTicks(4291),
                            Description = "Klasik sütlü çikolata, yumuşak ve kremsi.",
                            ExpirationDate = new DateTime(2025, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "images/Chocolates/1.jpg",
                            Ingredients = "Kakao Yağı, Süt Tozu, Şeker",
                            IsActive = true,
                            ModifiedDate = new DateTime(2024, 9, 8, 1, 59, 29, 98, DateTimeKind.Local).AddTicks(4292),
                            Name = "Sütlü Çikolata",
                            NutritionalInformation = "Kalori: 540, Yağ: 30g, Şeker: 50g",
                            Price = 15.00m,
                            StockQuantity = 50,
                            Weight = 100.0
                        },
                        new
                        {
                            Id = 2,
                            Brand = "DarkEssence",
                            Category = "Bitter Çikolata",
                            CocoaPercentage = 70.0,
                            CreatedDate = new DateTime(2024, 9, 8, 1, 59, 29, 98, DateTimeKind.Local).AddTicks(4295),
                            Description = "Yüksek kakao oranına sahip bitter çikolata.",
                            ExpirationDate = new DateTime(2025, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "images/Chocolates/2.jpg",
                            Ingredients = "Kakao Kitlesi, Şeker, Kakao Yağı",
                            IsActive = true,
                            ModifiedDate = new DateTime(2024, 9, 8, 1, 59, 29, 98, DateTimeKind.Local).AddTicks(4296),
                            Name = "Bitter Çikolata",
                            NutritionalInformation = "Kalori: 500, Yağ: 35g, Şeker: 20g",
                            Price = 18.00m,
                            StockQuantity = 40,
                            Weight = 100.0
                        },
                        new
                        {
                            Id = 3,
                            Brand = "SweetBliss",
                            Category = "Beyaz Çikolata",
                            CocoaPercentage = 20.0,
                            CreatedDate = new DateTime(2024, 9, 8, 1, 59, 29, 98, DateTimeKind.Local).AddTicks(4299),
                            Description = "Kremamsı ve tatlı beyaz çikolata.",
                            ExpirationDate = new DateTime(2025, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "images/Chocolates/3.jpg",
                            Ingredients = "Süt Tozu, Kakao Yağı, Şeker",
                            IsActive = true,
                            ModifiedDate = new DateTime(2024, 9, 8, 1, 59, 29, 98, DateTimeKind.Local).AddTicks(4300),
                            Name = "Beyaz Çikolata",
                            NutritionalInformation = "Kalori: 550, Yağ: 32g, Şeker: 55g",
                            Price = 16.00m,
                            StockQuantity = 60,
                            Weight = 100.0
                        },
                        new
                        {
                            Id = 4,
                            Brand = "OrganicTreats",
                            Category = "Organik Çikolata",
                            CocoaPercentage = 50.0,
                            CreatedDate = new DateTime(2024, 9, 8, 1, 59, 29, 98, DateTimeKind.Local).AddTicks(4303),
                            Description = "Organik kakao ile üretilmiş çikolata.",
                            ExpirationDate = new DateTime(2025, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "images/Chocolates/4.jpg",
                            Ingredients = "Organik Kakao Kitlesi, Organik Şeker, Organik Kakao Yağı",
                            IsActive = true,
                            ModifiedDate = new DateTime(2024, 9, 8, 1, 59, 29, 98, DateTimeKind.Local).AddTicks(4304),
                            Name = "Organik Çikolata",
                            NutritionalInformation = "Kalori: 520, Yağ: 28g, Şeker: 22g",
                            Price = 20.00m,
                            StockQuantity = 30,
                            Weight = 100.0
                        });
                });

            modelBuilder.Entity("ChocolateApp.Entity.Concrete.ChocolateCategory", b =>
                {
                    b.Property<int>("ChocolateId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ChocolateId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("ChocolateCategories", (string)null);
                });

            modelBuilder.Entity("ChocolateApp.Entity.Concrete.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("ChocolateApp.Entity.Concrete.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrderId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("chocolateId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("chocolateId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("ChocolateApp.Entity.Concrete.CartItem", b =>
                {
                    b.HasOne("ChocolateApp.Entity.Concrete.Cart", null)
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChocolateApp.Entity.Concrete.Chocolate", "Chocolate")
                        .WithMany()
                        .HasForeignKey("ChocolateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chocolate");
                });

            modelBuilder.Entity("ChocolateApp.Entity.Concrete.ChocolateCategory", b =>
                {
                    b.HasOne("ChocolateApp.Entity.Concrete.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChocolateApp.Entity.Concrete.Chocolate", "Chocolate")
                        .WithMany("ChocolateCategories")
                        .HasForeignKey("ChocolateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Chocolate");
                });

            modelBuilder.Entity("ChocolateApp.Entity.Concrete.OrderItem", b =>
                {
                    b.HasOne("ChocolateApp.Entity.Concrete.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChocolateApp.Entity.Concrete.Chocolate", "chocolate")
                        .WithMany()
                        .HasForeignKey("chocolateId");

                    b.Navigation("Order");

                    b.Navigation("chocolate");
                });

            modelBuilder.Entity("ChocolateApp.Entity.Concrete.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("ChocolateApp.Entity.Concrete.Chocolate", b =>
                {
                    b.Navigation("ChocolateCategories");
                });

            modelBuilder.Entity("ChocolateApp.Entity.Concrete.Order", b =>
                {
                    b.Navigation("OrderItems");
                });
#pragma warning restore 612, 618
        }
    }
}
